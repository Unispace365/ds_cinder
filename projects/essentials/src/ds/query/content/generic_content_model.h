#pragma once
#ifndef DS_MODEL_AUTOGENERATED_Content
#define DS_MODEL_AUTOGENERATED_Content

#include <cinder/Vector.h>
#include <ds/data/resource.h>
#include <memory>
#include <vector>


namespace ds { namespace model {


	/**
	* \class GenericContentRef
	*			Auto-generated data model for Content, but now manually-edited.
				This is For the xml_content_loader helper class, but can be repurposed if you like
	*/
	class GenericContentRef {
	  public:
		GenericContentRef();

		const std::wstring& getCategory() const;
		const int&			getId() const;
		const ds::Resource& getMedia() const;
		const std::wstring& getTextEight() const;
		const std::wstring& getTextFive() const;
		const std::wstring& getTextFour() const;
		const std::wstring& getTextOne() const;
		const std::wstring& getTextSeven() const;
		const std::wstring& getTextSix() const;
		const std::wstring& getTextThree() const;
		const std::wstring& getTextTwo() const;
		const std::wstring& getTitle() const;


		GenericContentRef& setCategory(const std::wstring& Category);
		GenericContentRef& setId(const int& Id);
		GenericContentRef& setMedia(const ds::Resource& Media);
		GenericContentRef& setTextEight(const std::wstring& TextEight);
		GenericContentRef& setTextFive(const std::wstring& TextFive);
		GenericContentRef& setTextFour(const std::wstring& TextFour);
		GenericContentRef& setTextOne(const std::wstring& TextOne);
		GenericContentRef& setTextSeven(const std::wstring& TextSeven);
		GenericContentRef& setTextSix(const std::wstring& TextSix);
		GenericContentRef& setTextThree(const std::wstring& TextThree);
		GenericContentRef& setTextTwo(const std::wstring& TextTwo);
		GenericContentRef& setTitle(const std::wstring& Title);


	  private:
		class Data;
		std::shared_ptr<Data> mData;
	};

}} // namespace ds::model

#endif
